import os
import asyncio
import random
import json
import logging
from datetime import datetime, timedelta, timezone
from telethon import TelegramClient
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.types import Channel
from telethon.errors import FloodWaitError, ChatAdminRequiredError, ChannelPrivateError
import pandas as pd
from dotenv import load_dotenv
import re
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_analyzer.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class Cache:
    def __init__(self, cache_file='chat_cache.json'):
        self.cache_file = cache_file
        self.cache = self._load_cache()

    def _load_cache(self):
        try:
            if os.path.exists(self.cache_file):
                with open(self.cache_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—ç—à–∞: {e}")
            return {}

    def _save_cache(self):
        try:
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(self.cache, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—ç—à–∞: {e}")

    def get(self, chat_id):
        return self.cache.get(chat_id)

    def set(self, chat_id, data):
        self.cache[chat_id] = {
            'data': data,
            'timestamp': datetime.now().isoformat()
        }
        self._save_cache()

class TelegramAnalyzer:
    def __init__(self):
        self.client = TelegramClient(
            'telegram_analyzer',
            os.getenv('API_ID'),
            os.getenv('API_HASH')
        )
        self.cache = Cache()
        self.rate_limit = 30  # –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
        self.last_request_time = {}
        
    async def start(self):
        await self.client.start()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    async def get_chat_info(self, chat_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_data = self.cache.get(chat_id)
            if cached_data:
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {chat_id}")
                return cached_data['data']

            chat = await self.client.get_entity(chat_id)
            if isinstance(chat, Channel):
                full_chat = await self.client(GetFullChannelRequest(chat))
                result = {
                    'title': chat.title,
                    'description': full_chat.full_chat.about,
                    'members_count': getattr(full_chat.full_chat, 'participants_count', None),
                    'is_public': not chat.megagroup,
                    'date_created': chat.date.isoformat(),
                    'last_activity': datetime.now(timezone.utc).isoformat()
                }
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self.cache.set(chat_id, result)
                return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_id}: {e}")
            return None

    async def analyze_dau(self, chat_id, hours=24):
        """–ê–Ω–∞–ª–∏–∑ DAU –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤"""
        try:
            messages = []
            async for message in self.client.iter_messages(chat_id, limit=100):
                if message.date > datetime.now(timezone.utc) - timedelta(hours=hours):
                    messages.append(message)
                else:
                    break
            
            # –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
            unique_senders = set()
            for msg in messages:
                if hasattr(msg.from_id, 'user_id'):
                    unique_senders.add(msg.from_id.user_id)
            
            return {
                'total_messages': len(messages),
                'unique_senders': len(unique_senders),
                'time_period': f'–ü–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤'
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ DAU: {e}")
            return None

    async def analyze_dau_monthly(self, chat_id, days=30):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–µ–≥–æ DAU –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π (–ø–æ –¥–Ω—è–º) –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            from collections import defaultdict
            messages_by_day = defaultdict(set)
            days_with_messages = set()
            async for message in self.client.iter_messages(chat_id, limit=3000):
                if message.date > datetime.now(timezone.utc) - timedelta(days=days):
                    day = message.date.date()
                    days_with_messages.add(day)
                    if hasattr(message.from_id, 'user_id'):
                        messages_by_day[day].add(message.from_id.user_id)
                else:
                    break
            if not messages_by_day:
                return {'avg_dau': None, 'avg_dau_percent': None, 'days_with_messages': 0}
            daily_counts = [len(users) for users in messages_by_day.values()]
            avg_dau = round(sum(daily_counts) / len(daily_counts), 2)
            return {
                'avg_dau': avg_dau,
                'days_counted': len(daily_counts),
                'days_with_messages': len(days_with_messages)
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ DAU –∑–∞ –º–µ—Å—è—Ü: {e}")
            return {'avg_dau': None, 'avg_dau_percent': None, 'days_with_messages': 0}

    async def generate_report(self, chat_id):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        chat_info = await self.get_chat_info(chat_id)
        if not chat_info:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ"
        
        dau_info = await self.analyze_dau(chat_id)
        if not dau_info:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
        
        members_count = chat_info.get('members_count') or 0
        if members_count:
            dau_percent = round((dau_info['unique_senders'] / members_count * 100), 2)
        else:
            dau_percent = '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        
        report = f"""
üìä –û—Ç—á–µ—Ç –ø–æ —á–∞—Ç—É: {chat_info['title']}

üìù –û–ø–∏—Å–∞–Ω–∏–µ: {chat_info['description']}
üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {chat_info['members_count']}
üåê –¢–∏–ø: {'–ü—É–±–ª–∏—á–Ω—ã–π' if chat_info['is_public'] else '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π'}
üìÖ –°–æ–∑–¥–∞–Ω: {chat_info['date_created']}

üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:
   ‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {dau_info['total_messages']}
   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {dau_info['unique_senders']}
   ‚Ä¢ DAU: {dau_percent}%
"""
        return report

def extract_username(chat_id):
    chat_id = chat_id.strip()
    if chat_id.startswith('@https://t.me/'):
        return chat_id[len('@https://t.me/'):]
    if chat_id.startswith('https://t.me/'):
        return chat_id[len('https://t.me/'):]
    if chat_id.startswith('@'):
        return chat_id[1:]
    return chat_id

def save_partial_report(results):
    import pandas as pd
    from datetime import datetime
    if not results:
        print('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.')
        return
    df = pd.DataFrame(results)
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f'partial_report_{timestamp}.xlsx'
    df.to_excel(filename, index=False)
    print(f'–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ {filename}')

async def main():
    analyzer = TelegramAnalyzer()
    await analyzer.start()
    
    logger.info('–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ username –∏–ª–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã/—á–∞—Ç—ã (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ). –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É:')
    chat_ids = []
    while True:
        chat_id = input().strip()
        if not chat_id:
            break
        chat_ids.append(chat_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    def is_valid_username(username):
        return bool(username) and username != '' and username != ' ' and username != 'https://t.me/'

    results = []
    try:
        for chat_id in chat_ids:
            username = extract_username(chat_id)
            if not is_valid_username(username):
                logger.warning(f'–ü—Ä–æ–ø—É—Å–∫–∞—é –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É: {chat_id}')
                continue
            
            logger.info(f'–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: {chat_id}...')
            try:
                chat_info = await analyzer.get_chat_info(username)
                if not chat_info:
                    logger.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ {chat_id}')
                    continue

                dau_info = await analyzer.analyze_dau(username)
                dau_month_info = await analyzer.analyze_dau_monthly(username)

                # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ 15-30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                pause_time = random.uniform(15, 30)
                logger.info(f'–î–µ–ª–∞—é –ø–∞—É–∑—É –Ω–∞ {pause_time:.1f} —Å–µ–∫—É–Ω–¥...')
                await asyncio.sleep(pause_time)

            except FloodWaitError as e:
                logger.error(f'–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥')
                logger.info('–°–æ—Ö—Ä–∞–Ω—è—é –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∑–∞–≤–µ—Ä—à–∞—é –∞–Ω–∞–ª–∏–∑.')
                save_partial_report(results)
                sys.exit(0)
            except (ChatAdminRequiredError, ChannelPrivateError) as e:
                logger.error(f'–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É {chat_id}: {str(e)}')
                continue
            except Exception as e:
                logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–∞—Ç–∞ {chat_id}: {str(e)}')
                continue

            members_count = chat_info.get('members_count') if chat_info else None
            if members_count:
                dau_percent = round((dau_info['unique_senders'] / members_count * 100), 2) if dau_info else None
                avg_dau_percent = round((dau_month_info['avg_dau'] / members_count * 100), 2) if dau_month_info and dau_month_info['avg_dau'] and members_count else None
            else:
                dau_percent = None
                avg_dau_percent = None
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞
            resume = '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
            days_with_messages = dau_month_info['days_with_messages'] if dau_month_info and 'days_with_messages' in dau_month_info else 0
            days_in_month = 30
            if members_count and dau_month_info and dau_month_info['avg_dau'] is not None and avg_dau_percent is not None:
                if members_count >= 1000:
                    if (dau_month_info['avg_dau'] < 5 and avg_dau_percent < 0.1) or days_with_messages < days_in_month * 0.3:
                        resume = '–ú–µ—Ä—Ç–≤—ã–π —á–∞—Ç'
                    elif avg_dau_percent > 10:
                        resume = '–§–ª—É–¥–∏–ª–∫–∞'
                    else:
                        resume = '–ñ–∏–≤–æ–π —á–∞—Ç'
                elif members_count >= 100:
                    if (dau_month_info['avg_dau'] < 1 and avg_dau_percent < 0.1) or days_with_messages < days_in_month * 0.3:
                        resume = '–ú–µ—Ä—Ç–≤—ã–π —á–∞—Ç'
                    elif avg_dau_percent > 15:
                        resume = '–§–ª—É–¥–∏–ª–∫–∞'
                    elif dau_month_info['avg_dau'] >= 1:
                        resume = '–ñ–∏–≤–æ–π —á–∞—Ç (–Ω–∏—à–µ–≤–æ–π/–æ–±—ä—è–≤–ª–µ–Ω–∏–π)'
                    else:
                        resume = '–ñ–∏–≤–æ–π —á–∞—Ç'
                else:
                    if dau_month_info['avg_dau'] < 1 or days_with_messages < days_in_month * 0.3:
                        resume = '–ú–µ—Ä—Ç–≤—ã–π —á–∞—Ç'
                    elif avg_dau_percent > 20:
                        resume = '–§–ª—É–¥–∏–ª–∫–∞'
                    else:
                        resume = '–ñ–∏–≤–æ–π —á–∞—Ç'
            results.append({
                '–ö–∞–Ω–∞–ª/—á–∞—Ç': chat_id,
                '–ù–∞–∑–≤–∞–Ω–∏–µ': chat_info['title'] if chat_info else '–û—à–∏–±–∫–∞',
                '–û–ø–∏—Å–∞–Ω–∏–µ': chat_info['description'] if chat_info else '–û—à–∏–±–∫–∞',
                '–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤': members_count if members_count is not None else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                'DAU': dau_info['unique_senders'] if dau_info else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                'DAU %': dau_percent if dau_percent is not None else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                'DAU (–º–µ—Å—è—Ü, —Å—Ä–µ–¥–Ω–µ–µ)': dau_month_info['avg_dau'] if dau_month_info and dau_month_info['avg_dau'] is not None else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                'DAU % (–º–µ—Å—è—Ü, —Å—Ä–µ–¥–Ω–µ–µ)': avg_dau_percent if avg_dau_percent is not None else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                '–î–Ω–µ–π —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (30–¥)': days_with_messages,
                '–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π (24—á)': dau_info['total_messages'] if dau_info else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                '–†–µ–∑—é–º–µ': resume
            })
    except KeyboardInterrupt:
        logger.warning('–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º! –°–æ—Ö—Ä–∞–Ω—è—é –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...')
        save_partial_report(results)
        return
    except Exception as e:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}')
        logger.info('–°–æ—Ö—Ä–∞–Ω—è—é –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...')
        save_partial_report(results)
        return
    
    df = pd.DataFrame(results)
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f'report_{timestamp}.xlsx'
    df.to_excel(filename, index=False)
    logger.info(f'–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ {filename}')

if __name__ == '__main__':
    asyncio.run(main()) 
    